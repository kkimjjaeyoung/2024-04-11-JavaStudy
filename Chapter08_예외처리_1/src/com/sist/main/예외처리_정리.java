/*
 * 예외처리 : 사전에 에러를 방지하는 프로그램(견고성). 비정상 종료를 방지하고 정상상태를 유지.
 * 	-> 직접처리 : 예외 발생시 복구(복구하는 위치 : cathch 블록)
 * 	-> 간접처리 : 예외 발생시 회피(예외처리없이 회피 : throws)
 *  -> 임의발생 : 에러가 없는데 임의로 발생(테스트에 사용 : throw)
 *  -> 사용자정의 : 자바에서 지원하지 않는 예외처리를 직접 구축(Exception을 상속받아 처리. 사용빈도 극소)
 *  
 *  1.try~catch
 *  	try{
 *  		(정상 수행하는 문장 || 프로그램 수행중 오류가 발생할 수 있는 문장 && 조건문 활용)					//프로그래머 실수, 사용자의 입력 실수 등
 *  	}catch(예외처리클래스)		//여러개 사용 가능. 예상되는 에러별 설정 혹은 한개로 처리 가능(한개로 처리를 위한 상속)
 *  	{
 *  		(try수행중 에러발생시 처리하는 영역
 *  	}
 *  	finally{
 *  		(정상, 에러처리와 관련없이 무조건 수행하는 문장)						//생략가능. 필요시에만 사용
 *  	}
 */

package com.sist.main;

public class 예외처리_정리 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
