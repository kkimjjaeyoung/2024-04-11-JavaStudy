/*
 * 클래스 구조
 * 	[접근지정어] [제어어] class classname
 * 		제어어 : static(공통기능에 사용), abstract(추상클래스), final(종단클래스)
 * 
 * 
 */

/*
 * 객체 생성
 *    
 */

/*
 * 패키지 : 관련된 클래스를 모아서 관리(기능별 분리) 
 * 	package 경로명 			//패키지명은 숫자시작 X, 키워드 X 
 * 		com(org).회사명.구분자			//구분자 : 오라클연결(dao), 데이터형(vo), 크롤링/openAi(manager), 웹 전송(service)
 * 		클래스찾기가 쉽고 같은 클래스명 사용 가능
 */

/*
 * import : 패키지를 불러오는 경우(여러개 사용 가능)
 *  1. 라이브러리를 불러오는 경우
 *  2. 사용자 정의 클래스 불러오기
 */

/*
 * 상속
 * 	목적 : 기존의 클래스를 재사용할때 사용. 수정/추가 가능
 * 		냄겨주는 내용 : 변수, 메소드				//제외 : static(공통으로 사용), private(상속은 되나 접근 불가), 생성자, 초기화블록
 * 	형식 : class A extends B
 * 		상속을 받는 클래스와 내리를 클래스로 나뉜다.
 * 		상속을 받으면 기존의 기능에 추가기능을 사용가능(기능확장). 상속을 내린 클래스의 소스를 반복할 필요가 없어 소스가 간결해진다
 * 			super : 상위 클래스 메모리 할당.		this : 하위 클래스 메모리 할당
 * 			int a; -> super.a || this.a				void display() {} -> super.display() || super.display
 * 
 *   	**상속을 받은 클래스느 상속을 내린 클래스의 변수, 메소드에 접근이 가능. 상속을 내리는 클래스는 상속을 받은 클래스에 접근이 불가능
 *   	**자바의 모든 클래스는 object의 상속을 받는다(모든 데이터형 적용 가능. 배열생성시 다른 데이터형 혼합 가능)
 */

/*
 * 단일상속, 오버라이딩
 *  자바는 단일 상속만 가능(extends 클래스명, 클래스명 -> 불가능)
 *  	-> 두개를 받는 경우	A, B extends A, C extends B 형식을 통해야 함(다중상속 불가 : 인터페이스를 사용해 다중상속 가능)
 *  상속받은 변수, 메소드가 따로 보이지 않으므로 가독성이 떨어진다
 */

/*
 * 상속시 접근제한(캡슐화가 깨지는 경향)
 * 
 */

/*
 * 상속시 생성자
 */

/*
 * 키워드(super/this)
 */

/*
 * 객체 형변환
 */

package com.sist.main;

public class MainClass1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
