/*
 * 클래스 구성요소
 *  클래스 블록
 *  class ClassName{	구현불가, 선언만가능(변수[한개만 저장 가능], 클래스[사용자정의 데이터형], 배열[여러개 저장 가능, 변수형])		}
 * 
 * 	변수 : 프로그램에 필요한 데이터를 저장하는 공간 -> 맴버변수(프로그램 종료시까지 유지, 자동초기화(default))
 *		변수 초기화(변수는 초기값 없이는 메모리 저장 안됨)
 *			1. 생성자( 클래스명과 동일. 리턴형 없음. 여러개의 생성자 생성 가능. 역할이 필요없는경우 생략 가능[생성자는 반드시 필요하므로 생략된경우 컴파일러가 생성자를 추가]. 호출은 반드시 new 를 통해 생성 ) -> 같은 이름의 메소드로 세로운 기능 추가(오버로딩)
 *																		오버로딩( 메소드명 동일. 매개변수의 갯수나 데이터형이 다름. 리턴형은 관계없음. 접근저정어는 관계 없음 )
 *				1). 맴버변수의 초기화 담당
 *				2). 클래스를 메모리에 저장할 때 호출되는 메소드
 *			2. 초기화블록( 호출없이 자동으로 처리 )
 *				명시적 초기화 (구분 : 명시적인 초기화가 되는지 유무->	
 *					int a=100; 
 *				초기화 블록
 *					int a;
 *					{ a=100; }
 *				생성자
 *					int a;
 *					생성자()
 *					{ a=100; }
 *						저장순서 : 기본값 -> 명시적 초기값 -> 초기화블록 -> 생성자 (동시사용 x)
 *			3. 메소드( 특정 기능을 수행하는 명령문의 집합 )
 *				재사용, 기능별분류, 반복 기능 제거, 구조적 프로그램, 기능수행과 클래스간 연결
 *					객체 지향 프로그램 : 여러 클래스를 모아 조립하는 프로그램( 패키지/임포트, 데이터보호[캡슐화], 상속/포함, 오버라이딩/오버로딩 ) 	
 *
 */

/*
 * 개념
 * 	형식
 * 	사용방식
 * 	조립
 * 
 * 접근지정어 
 *  private : 자신의 클래스 안에서만 사용가능(맴버변수)
 *  default : 키워드가 없는 상태(같은 패키지 안에서만 접근 가능.)
 *  protected : 같은 패키지만에서만 접근 가능.  상속받는경우엔 다른 패키지 접근 가능
 *  public : open모드. 패키지와 관계없이 모든 클래스에서 접근 가능
 *  		저장 : public set변수명(); -> setter
 *  		읽기 : public get변수명();	-> getter
 *  			변수는 메모리값이 저장되에 노출 위험. 메소드는 주소값만 저장해 노출 없음	(캡슐화)
 *   접근지정어 사용법
 *   	클래스 : [접근지정어][옵션] class Classname {	}	->	대체로 public을 사용해 다른 클래스와 연결.
 *   		옵션 : static(공통클래스), abstract(추상클래스), final(종단클래스)
 *   	생성자 : [접근지정어] 클래스명() {	}	->	대체로 public 사용 후 클래스간 연결
 *   	맴버변수 : [접근지정어][옵션] 데이터형 변수명;
 *   		static : 공통사용변수(메모리 공간 1개만 생성)
 *   		private : 노출하면 안될 정보
 *   		public : 공유해서 구축에 필요하고 노출되어도 상관없는 정보
 *  	메소드 : [접근지정어][옵션] 리턴형 메소드명	->	public 사용으로 다른클래스와 연결
 *  		옵션 : static, abstract
 *  
 *  		메소드 수행
 *  			public int aaa() { 1.문장 2.문장 3.문장 return 10; }
 *  					int a=aaa() -> 1.문장 -> 2.문장 -> 3.문장 -> a에 10대입 -> 이어서 진행
 */

package com.sist.main;

public class 클래스의구성요소_변수 {
	//인스턴스는 new를이용해 저장
	/*
	 * 인스턴스 : 객체
	 * 		클래스내용(변수, 메소드) : 메모리게 각자 저장된 상태로 new를 이용해야 사용 가능
	 * 		인스턴스 : 변수'메소드
	 * 		static : 변수/메소드
	 * 			객체 자신이 가진 메소드는 클래스 전체에서 사용 가능
	 */
	public void aaa() {
		System.out.println("aaa진입");
		bbb();
		System.out.println("aaa종료");
	}
	public void bbb() {
		System.out.println("bbb진입");
		ccc();
		System.out.println("bbb종료");
	}
	public void ccc() {
		System.out.println("ccc진입");
		System.out.println("ccc종료");
	}
	

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		클래스의구성요소_변수 aa=new 클래스의구성요소_변수();
		aa.aaa(); 									//aaa진입-> bbb진입-> ccc진입-> ccc종료-> bbb종료-> aaa종료
	}

}
