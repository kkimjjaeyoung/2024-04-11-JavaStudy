/*
 * 클래스의 구성(데이터+기능)
 * 	1.데이터(맴버변수) : 클래스에서는 다른 데이터형을 모아서 관리, 전송(브라우저, 윈도우)
 * 		1. 인스턴스 변수 : new를 사용할때마다 메모리에 따로 저장되는 변수
 * 		2. 정적 변수 : 컴파일러에 의해 자동으로 저장(메모리공간 1개, 모든 클래스에서 공유)
 * 		// 인스턴스/정적 변수는 다른 클래스에 연결해서 사용 가능(프로그램 종료시까지 유지)	->	자동 기본초기화, 기본형, 클래스, 배열 사용가능
 * 		3. 지역 변수 : 메소드 안에서만 사용가능한 변수(지역변수, 배개변수, 루프변수, 임시변수) -> 변수의 초기화가 없다(반드시 초기화 필수)
 * 		// 메소드가 종료되만 자동으로 사라지는 변수 
 * 		// 객체 생성시 호출해야되는 메소드=생성자(필요시 사용) : 맴버변수, 정적변수, 메소드, 생성자
 * 			// 생성자 : 여러개 사용 가능. 없는경우 컴파일러가 자동 첨부(디폴트 생성자) -> 상속 예외조건(1. 클래스명과 동일 2.리턴형이 없다 3.객체생성시 호출되는 메소드 4.다른클래스에서도 사용이 가능->public 5.여러개있는경우->오버로딩[중복함수정의] 6.)
 * 				//오버로딩 : 메소드 동일, 매개변수의 갯수와 데이터형은 다르나, 리턴형은 관계없다, 접근지정어는 관계 없다
 * 			//생성자는 변수에 대한 초기화, 시작과 동시에 동작하는 내용
 * 			// 메소드
 * 				인스턴스 메소드 : new에 의해 따로 저장
 * 				공통 메소드 : static (웹-데티어베이스 연결, 한글변환, 암호화, 복호화)
 * 					//접근지정어 public(다른 클래스와 연결)	
 * 				public 리턴형 메소드명(매개변수...){		//리턴형 : 사용자 요청 처리 결과([], 클래스)	매개변수 : 사용자 요청 내용
 * 				구현..				
 * 				결과값 전송
 * 				return..
 * 				}				...메소드는 호출시마다 처음부터 실행해 종료되면 원래 호출된 위치로 복귀
 * 					//메소드는 반복 제거(코드의 간소화), 관련된 명령문을 모아서 관리(기능 분리, 가독성), 재사용(수정/추가)
 * 				맴버변수/메소드
 * 					인스턴스( 객체명.변수명, 객체명, 메소드 )
 * 				static( 클래스명.변수명, 클래스명.메소드 )
 * 					사용법 : 변수(인스턴스 변수)->데이터보호(private), 다른 클래스에 연결, 기능 설정(public getter/setter -> 캡슐화)
 * 							메소드(인스턴스 메소드)->다른 클래스와 연결(public), 생성자(필요시에만 사용, 자동추가)
 * 						요구사항(사용자에게 출력할 데이터 선정[맴버변수], 데이터 출력을 위한 기능 설정[맴버메소드], 시작시 출력할 화면[생성자])
 * 			초기화(값 지정) : 초기화블록/생성자
 * 	
 * 
 * 
 */

package com.sist.main;

public class MainClass_2 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
