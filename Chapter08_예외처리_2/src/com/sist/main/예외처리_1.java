/*
 * 1. 데이터형/변수/연산자/제어문
 * 2. 클래스 구성요소 > 맴버변수(static), 메소드, 생성자
 * 3. 재사용 > 상속/포함
 * 4. 클래스의 종류 > 추상클래스, 인터페이스
 * 5. 예외버치 > try~catch, throws
 * 
 * 6. 라이브러리
 * 7. 조립(라이브러리를 이용해 프로그램 제작)
 * 
 * 	예외처리 : 사전에 에러발생에 대한 방지 프로그램(비정상 종료 방지, 에러발생시 수정이 아닌 건너뛰기)
 * 		에러발생
 * 			1. 처리 : 우선 조건문을 사용하나 조건문으로 처리가 어려운 경우 예외처리 이용
 * 			2. 에러 종류
 * 				1) Error : 수정이 불가능한 에러(메모리 부족, 이클립스 오류 등)
 * 				2) Exception : 수정이 가능한 에러(프로그램 소스 안에서 수정 가능한 오류)
 * 		예외처리 방법
 * 			1. 직접처리 : 프로그래머가 에러를 직접 찾아서 복구( try~catch~finally )
 * 			2. 간접처리 : 메소드 호출시 처리. 예측되는 에러만 선언( 메소드() throws 예외종류 )
 * 			3. 임의발생 : 테스트에 주로 사용. 에러발생 대비.( throw )
 * 			4. 사용자정의 : 자바에서 전체적인 예외처리를 지원하지 않으므로 필요시 직접 제작 후 사용
 * 				catch에는 순서 존재. throws에는 순서 없음
 * 				예외처리 상속도 ( 반드시 예외처리(CheckedException)-컴파일러 예외처리 확인, 필요시 처리(UnCheckedException)-실행시 처리 )
 */


package com.sist.main;


public class 예외처리_1 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
	}

}
